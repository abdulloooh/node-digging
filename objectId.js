// _id : "5f35e6aab7ac1a251ba05e33"
//12 bytes
/*
    Timestamp: 4 bytes
    Machine Identifier: 3 bytes
    Process Identifier: 2 bytes
    Counter: 3 bytes
*/

//Very low percent that one will ever merge with the others
//If you run some process at exactly same timestamp on the same machine on the same process,
//The couter still has 3 butes = 3 * 8 bits = 24 bits
// So, you hvae 2^24 possibilities = 16Million
//So very unlikely to run that amount of process at exactly same timestamp

//This is generated and managed by mongoDB driver at server level which is abstracted by Monogoose
//and it is not generated by MongoDB itself unlike in most relational database like SQL server
//So it is created exactly when new object is created from defined model
//This is a plus from MongoDB because it helps scalability and reduce processing time relative to RDS

//Generate objectId manually
const mongoose = require("mongoose");

const id = mongoose.Types.ObjectId();

//We can also get timestamp directly from that so it function as value for property as "created at"
const timestamp = id.getTimestamp();

//There is also static method to check validity

const isValidObjectId_1234 = mongoose.Types.ObjectId.isValid("1234");

console.log(
  `id : ${id}\ntimestamp: ${timestamp}\nisValidObjectId_1234: ${isValidObjectId_1234}`
);
